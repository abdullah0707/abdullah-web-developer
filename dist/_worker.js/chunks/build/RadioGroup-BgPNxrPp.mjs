import{_ as e,r as t}from"./Radio-MaYLmbtt.mjs";import{a as o,v as l,m as r,f as s,g as a,s as i}from"./server.mjs";import{u as d}from"./useFormGroup-C1Kwcc-G.mjs";import{q as u,t as n,k as p,v as m,z as c,j as f}from"../routes/renderer.mjs";import"../_/nitro.mjs";import"../_/shared.esm-bundler.mjs";import"../_/index2.mjs";const g=r(a.ui.strategy,a.ui.radioGroup,{wrapper:"relative flex items-start",fieldset:"",legend:"text-sm font-medium text-gray-700 dark:text-gray-200 mb-1",default:{color:"primary"}}),b=r(a.ui.strategy,a.ui.radio,t),v=l.defineComponent({components:{URadio:e},inheritAttrs:!1,props:{modelValue:{type:[String,Number,Object,Boolean],default:""},name:{type:String,default:null},legend:{type:String,default:null},options:{type:Array,default:()=>[]},optionAttribute:{type:String,default:"label"},valueAttribute:{type:String,default:"value"},disabled:{type:Boolean,default:!1},color:{type:String,default:()=>g.default.color,validator:e=>a.ui.colors.includes(e)},class:{type:[String,Object,Array],default:()=>""},ui:{type:Object,default:()=>({})},uiRadio:{type:Object,default:()=>({})}},emits:["update:modelValue","change"],setup(e,{emit:t}){const{ui:o,attrs:r}=s("radioGroup",l.toRef(e,"ui"),g,l.toRef(e,"class")),{ui:a}=s("radio",l.toRef(e,"uiRadio"),b),{emitFormChange:u,color:n,name:p}=d(e,g,!1);l.provide("radio-group",{color:n,name:p});const guessOptionValue=t=>i(t,e.valueAttribute,i(t,e.optionAttribute)),guessOptionText=t=>i(t,e.optionAttribute,i(t,e.valueAttribute)),guessOptionSelected=t=>e.modelValue===guessOptionValue(t);return{ui:o,uiRadio:a,attrs:r,normalizedOptions:l.computed(()=>e.options.map(e=>(e=>["string","number","boolean"].includes(typeof e)?{value:e,label:e}:{...e,value:guessOptionValue(e),label:guessOptionText(e),selected:guessOptionSelected(e)})(e))),onUpdate:e=>{t("update:modelValue",e),t("change",e),u()}}}});const y=v.setup;v.setup=(e,t)=>{const o=l.useSSRContext();return(o.modules||(o.modules=new Set)).add("node_modules/@nuxt/ui/dist/runtime/components/forms/RadioGroup.vue"),y?y(e,t):void 0};const x=o(v,[["ssrRender",function(t,o,r,s,a,i,d,g){const b=e;o(`<div${u(l.mergeProps({class:t.ui.wrapper},s))}><fieldset${u(l.mergeProps(t.attrs,{class:t.ui.fieldset}))}>`),t.legend||t.$slots.legend?(o(`<legend class="${n(t.ui.legend)}">`),p(t.$slots,"legend",{},()=>{o(`${m(t.legend)}`)},o,r),o("</legend>")):o("\x3c!----\x3e"),o("\x3c!--[--\x3e"),c(t.normalizedOptions,e=>{o(f(b,{key:e.value,label:e.label,"model-value":t.modelValue,value:e.value,help:e.help,disabled:e.disabled||t.disabled,ui:t.uiRadio,onChange:o=>t.onUpdate(e.value)},l.createSlots({_:2},[t.$slots.label?{name:"label",fn:l.withCtx((o,r,s,a)=>{if(!r)return[l.renderSlot(t.$slots,"label",l.mergeProps({ref_for:!0},{option:e,selected:e.selected}))];p(t.$slots,"label",l.mergeProps({ref_for:!0},{option:e,selected:e.selected}),null,r,s,a)}),key:"0"}:void 0,t.$slots.help?{name:"help",fn:l.withCtx((o,r,s,a)=>{if(!r)return[l.renderSlot(t.$slots,"help",l.mergeProps({ref_for:!0},{option:e,selected:e.selected}))];p(t.$slots,"help",l.mergeProps({ref_for:!0},{option:e,selected:e.selected}),null,r,s,a)}),key:"1"}:void 0]),r))}),o("\x3c!--]--\x3e</fieldset></div>")}]]);export{x as default};
//# sourceMappingURL=RadioGroup-BgPNxrPp.mjs.map
